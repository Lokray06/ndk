import nebula.core.Object;
import nebula.core.String;

namespace nebula.io
{
    /// Provides static methods for standard console input and output.
    /// This is a native class that wraps C++ iostream functionality.
    native class Console
    {
        // --- Print Methods ---
        public static wrapper void print(Object anything) -> "std::cout << (${anything} ? ${anything}->toString()->raw() : \"null\")";
        public static wrapper void print(string anyString) -> "std::cout << (${anyString} ? ${anyString}->raw() : \"null\")";
        public static wrapper void print(char character) -> "std::cout << ${character}";
        public static wrapper void print(int number) -> "std::cout << ${number}";
        public static wrapper void print(bool booleanValue) -> "std::cout << std::boolalpha << ${booleanValue}";
        public static wrapper void print(float floatValue) -> "std::cout << ([&]() { std::stringstream ss; ss << std::setprecision(std::numeric_limits<float>::max_digits10) << floatValue; return ss.str(); })()";
        public static wrapper void print(double doubleValue) -> "std::cout << ([&]() { std::stringstream ss; ss << std::setprecision(std::numeric_limits<double>::max_digits10) << doubleValue; return ss.str(); })()";

        // --- Println Methods ---
        public static wrapper void println(Object anything) -> "std::cout << (${anything} ? ${anything}->toString()->raw() : \"null\") << std::endl";
        public static wrapper void println(string anyString) -> "std::cout << (${anyString} ? ${anyString}->raw() : \"null\") << std::endl";
        public static wrapper void println(char character) -> "std::cout << ${character} << std::endl";
        public static wrapper void println(int number) -> "std::cout << ${number} << std::endl";
        public static wrapper void println(bool booleanValue) -> "std::cout << std::boolalpha << ${booleanValue} << std::endl";
        public static wrapper void println(float floatValue) -> "std::cout << ([&]() { std::stringstream ss; ss << std::setprecision(std::numeric_limits<float>::max_digits10) << floatValue; return ss.str(); })() << std::endl";
        public static wrapper void println(double doubleValue) -> "std::cout << ([&]() { std::stringstream ss; ss << std::setprecision(std::numeric_limits<double>::max_digits10) << doubleValue; return ss.str(); })() << std::endl";
    }
}